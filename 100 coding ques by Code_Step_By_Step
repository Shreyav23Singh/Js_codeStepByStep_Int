QUESTION 1
let a=[];
let b=[];
console.warn(a==b)
console.warn(a===b)
output
false
false

In JavaScript, the `==` operator checks for equality by performing type coercion, while the `===` operator checks for equality without type
coercion. 

This will output `false` because when using the `==` operator with arrays, it compares the object references, not the contents of the arrays.
Since `a` and `b` are two distinct array objects, their references are not the same, resulting in `false`.

This will also output `false` because the `===` operator checks for strict equality, including both value and type. Again, `a` and `b` are
two different array objects, so their types are different, resulting in `false`.

In conclusion, both `console.warn(a == b)` and `console.warn(a === b)` will output `false`.


--------------------------------------------------------------------------------------------------------------------------------------------------
Question 2
let a=[];
let b=a;
console.log(a==b)
console.log(a===b)
Output
true
This will output true because when comparing arrays using the == operator, it compares the object references. Since you assigned 
a to b, they both refer to the same array object, resulting in true.

---------------------------------------------------------------------------------------------------------------------------------------------
Question 3

let a=[20]
let b=[20]
console.warn(a[0]==b[0])
console.warn(a[0]===b[0])
This will output true because the == operator compares the values after performing type coercion. In this case, both a[0] and b[0] have the same value,
which is 20. So, the comparison returns true.
In conclusion, both console.warn(a[0] == b[0]) and console.warn(a[0] === b[0]) will output true because the values and types of a[0] and b[0] are equal.

---------------------------------------------------------------------------------------------------------------------------------------------
Question 4
let arr = [1, 2, 3, 4, 5];
let obj = {
  name: 'Hardwork',
  section: '2',
  rollNo: '23'
};

console.log([...arr]);
console.log([...arr, obj]);
```

Output:
```
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5, { name: 'Hardwork', section: '2', rollNo: '23' }]
```

In the first `console.log` statement, the spread syntax `[...arr]` spreads the elements of the `arr` array into a new array.
Since `arr` contains the numbers 1 to 5, the output is `[1, 2, 3, 4, 5]`.

In the second `console.log` statement, the spread syntax `[...arr, obj]` spreads the elements of `arr` and appends the `obj` object at the end.
The `obj` object contains the properties `name`, `section`, and `rollNo`. , where `{ name: 'Hardwork', section: '2', rollNo: '23' }` represents the `obj` object.

---------------------------------------------------------------------------------------------------------------------------------------------
5. Question 
console.log(typeof NaN)

```javascript
console.log(typeof NaN);  // Output: 'number'
```

In JavaScript, `NaN` is a special numeric value that represents an invalid or unrepresentable result of a mathematical operation. 
Despite its name, `NaN` is considered a numeric data type.
---------------------------------------------------------------------------------------------------------------------------------------------
6. Question 
let data =10 -  -10;
console.log(data)
Output
20
---------------------------------------------------------------------------------------------------------------------------------------------
7. Question 
const fun ={name : 'Success'}
console.warn(delete fun.name)
console.log(fun.name)

Output
true
{}

The delete operator is used in JavaScript to remove a property from an object. When you use the delete operator on a property and it succeeds 
in deleting the property, it returns true. Otherwise, it returns false.

---------------------------------------------------------------------------------------------------------------------------------------------
8. Question 

const fun ={name : 'Success'}
console.warn(delete fun)

Output
false
Because we can delete the object directly itself by delete , in  fun still name property iss there

---------------------------------------------------------------------------------------------------------------------------------------------
9. Question 
const data =["Honey" , "Sunny" ,"Bunny"];
const [y]=data;
console.log(y)
//If I want only Sunny than what to do
const [,z]=data;
console.log(z)
//If I want only Bunny than what to do
const [,,x]=data;
console.log(x)

Output
Honey
Sunny
Bunny

In the first example, [, y] = data skips the first element ("Honey") and assigns the second element ("Sunny") to the variable y. 
Therefore, console.log(y) outputs "Sunny".

In the second example, [, , z] = data skips the first and second elements ("Honey" and "Sunny") and assigns the third element ("Bunny") 
to the variable z. Hence, console.log(z) outputs "Bunny".
